<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bjdfzh.businessprocess.dao.QualificationMapper">
<resultMap type="com.bjdfzh.businessprocess.entity.Qualification" id="QualificationMap"> 
<id column="id" property="id"/>
<result column="firstid" property="firstid"/> 
<result column="firstname" property="firstname"/> 
<result column="secondid" property="secondid"/> 
<result column="secondname" property="secondname"/>
<result column="testprojectid" property="testprojectid" />
 <result column="methodid" property="methodid" />
 <result column="standarddid" property="standarddid" />
 <result column="projectsort" property="projectsort" />
 <result column="testproject" property="testproject" />
  <result column="methodname" property="methodname" />
   <result column="standardname" property="standardname" />
 <result column="methodsort" property="methodsort" />
  <result column="limitcomment" property="limitcomment" />
 <result column="price" property="price" />
 <result column="companyid" property="companyid" /> 
</resultMap>

    <select id="getqualifications" parameterType="integer" resultMap="QualificationMap">
        select 
    t1.id firstid
		,t1.testproject firstname
		,t2.id secondid
		,t2.testproject secondname 
		,t.id
		,t.companyid
			,t.testprojectid
			,t.methodid
			,t.standardid
			,t.projectsort
			,t3.testproject
			,tm.methodname
			,tstand.standardname
			,t.methodsort
			,t.limitcomment
			,t.price
			from t_qualification t
			inner join  
			(
			select id,pid,testproject from (
			
			              select t1.id,t1.pid,t1.level,t1.testproject,
			
			              if(find_in_set(pid, @pids) > 0, @pids := concat(@pids, ',', id), 0) as ischild
			
			              from (
			
			                   select id,pid,level,testproject from t_test_category t   order by pid, id
			
			                  ) t1,
			
			                  (select @pids := #{id} ) t2
			
			             ) t3 where ischild != 0 and level=3
			       union
				 select id,pid,testproject from t_test_category where level=3 and id = #{id} 
				)t3
				on t3.id=t.testprojectid
				inner join t_test_category t2
						on t2.id=t3.pid
						inner join t_test_category t1
						on t1.id=t2.pid
				left join t_test_method tm
				on tm.id=t.methodid
				left join t_test_standard tstand
				on tstand.id=t.standardid
				where t.companyid=1
				order by t.projectsort,t.methodsort
    </select> 
     <select id="getqualificationsbyid" parameterType="integer" resultMap="QualificationMap">
			        select  
				t1.id firstid
				,t1.testproject firstname
			 	,t2.id secondid
				,t2.testproject secondname
				,t.id,t.companyid
				,t.testprojectid
				,t.standardid
				,t.methodid
				,t.projectsort
				,t3.testproject
				,tstand.standardname
				,tm.methodname
				,t.methodsort
				,t.limitcomment
				,t.price
						from t_qualification t
						inner join  t_test_category t3
							on t3.id=t.testprojectid
						inner join t_test_category t2
						on t2.id=t3.pid
						inner join t_test_category t1
						on t1.id=t2.pid
							left join t_test_method tm
							on tm.id=t.methodid
							left join t_test_standard tstand
							on tstand.id=t.standardid
					where  t.id= #{id}
    </select>
    <select id="getqualificationsbyids" parameterType="string" resultMap="QualificationMap">
        select  
				t1.id firstid
				,t1.testproject firstname
			 	,t2.id secondid
				,t2.testproject secondname
				,t.id,t.companyid
				,t.testprojectid
				,t.standardid
				,t.methodid
				,t.projectsort
				,t3.testproject
				,tstand.standardname
				,tm.methodname
				,t.methodsort
				,t.limitcomment
				,t.price
						from t_qualification t
						inner join  t_test_category t3
							on t3.id=t.testprojectid
						inner join t_test_category t2
						on t2.id=t3.pid
						inner join t_test_category t1
						on t1.id=t2.pid
							left join t_test_method tm
							on tm.id=t.methodid
							left join t_test_standard tstand
							on tstand.id=t.standardid
				where t.id in (${ids})
				order by t.projectsort,t.methodsort
    </select>
    <select id="getqualificationsearch" parameterType="string" resultMap="QualificationMap">
         select  
				t1.id firstid
				,t1.testproject firstname
			 	,t2.id secondid
				,t2.testproject secondname
				,t.id,t.companyid
				,t.testprojectid
				,t.standardid
				,t.methodid
				,t.projectsort
				,t3.testproject
				,tstand.standardname
				,tm.methodname
				,t.methodsort
				,t.limitcomment
				,t.price
						from t_qualification t
						inner join  t_test_category t3
							on t3.id=t.testprojectid
						inner join t_test_category t2
						on t2.id=t3.pid
						inner join t_test_category t1
						on t1.id=t2.pid
							left join t_test_method tm
							on tm.id=t.methodid
							left join t_test_standard tstand
							on tstand.id=t.standardid
		where companyid=1 and (t3.testproject like  #{projectname} and tstand.standardname like #{methodname})
		order by t.projectsort,t.methodsort
    </select> 
    <select id="getqualificationsearchnon" parameterType="string" resultMap="QualificationMap">
         select  
				t1.id firstid
				,t1.testproject firstname
			 	,t2.id secondid
				,t2.testproject secondname
				,t.id,t.companyid
				,t.testprojectid
				, null standardid
				, null methodid
				,t.projectsort
				,t3.testproject
				, null standardname
				, null methodname
				,t.methodsort
				,t.limitcomment
				,t.price
						from t_qualification t
						inner join  t_test_category t3
							on t3.id=t.testprojectid
						inner join t_test_category t2
						on t2.id=t3.pid
						inner join t_test_category t1
						on t1.id=t2.pid 
		where companyid=#{companyid} and (t3.testproject like  #{projectname})
		order by t.projectsort,t.methodsort
    </select> 
    <select id="getqualificationsbycompany" parameterType="integer" resultMap="QualificationMap">
        select 
    t1.id firstid
		,t1.testproject firstname
		,t2.id secondid
		,t2.testproject secondname 
		,t.id
		,t.companyid
			,t.testprojectid
			,t.methodid
			,t.standardid
			,t.projectsort
			,t3.testproject
			,tm.methodname
			,tstand.standardname
			,t.methodsort
			,t.limitcomment
			,t.price
			from t_qualification t
			inner join  
			(
			select id,pid,testproject from (
			
			              select t1.id,t1.pid,t1.level,t1.testproject,
			
			              if(find_in_set(pid, @pids) > 0, @pids := concat(@pids, ',', id), 0) as ischild
			
			              from (
			
			                   select id,pid,level,testproject from t_test_category t   order by pid, id
			
			                  ) t1,
			
			                  (select @pids := #{id} ) t2
			
			             ) t3 where ischild != 0 and level=3
			       union
				 select id,pid,testproject from t_test_category where level=3 and id = #{id} 
				)t3
				on t3.id=t.testprojectid
				inner join t_test_category t2
						on t2.id=t3.pid
						inner join t_test_category t1
						on t1.id=t2.pid
				left join t_test_method tm
				on tm.id=t.methodid
				left join t_test_standard tstand
				on tstand.id=t.standardid
				where t.companyid=#{companyid}
				order by t.projectsort,t.methodsort
    </select>
    <update id="updatequalification" parameterType="com.bjdfzh.businessprocess.entity.Qualification">
      update t_qualification
      set
         testprojectid=#{testprojectid}, 
         standardid=#{standardid},
        methodid=#{methodid}
        ,price=#{price}
        where id=#{id}
    </update> 
    <insert id="addqualification" parameterType="com.bjdfzh.businessprocess.entity.Qualification"
    useGeneratedKeys="true" keyProperty="id"
    >
      insert into t_qualification
      (
        
        testprojectid,
        companyid,
        standardid,
        methodid
        ,price
       )
       values(
       #{testprojectid}
       ,#{companyid}
       ,#{standardid}
       ,#{methodid}
       ,#{price}
       )
    </insert>
    <delete id="deletequalification" parameterType="integer">
    delete from t_qualification where id=#{id}
    </delete>
</mapper>