<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bjdfzh.businessprocess.dao.SampleMapper">
<resultMap type="com.bjdfzh.businessprocess.entity.Sample" id="SampleMap">
<id column="sampleid" property="id"/>
	<result column="projectctid" property="projectctid" />
	<result column="samplename" property="samplename" />
	<result column="samplenumber" property="samplenumber" />  
	<result column="samplequality" property="samplequality" />
	<result column="samplespec" property="samplespec" />
	<result column="samplevolume" property="samplevolume" /> 
	<result column="sampledate" property="sampledate" />
	<result column="manufactory" property="manufactory" />
	<result column="manufactoryaddress" property="manufactoryaddress" />
	<result column="purty" property="purty" />
	<result column="brand" property="brand" />
	<result column="manufactoryphone" property="manufactoryphone" />
	<result column="manudate" property="manudate" />
	<result column="manuno" property="manuno" />
	<result column="remark" property="remark" /> 
	<result column="price" property="price" />
	<result column="externprice" property="externprice" /> 
	<result column="stestproject" property="testproject" /> 
    <result column="smethodname" property="methodname" />
    <result column="executestandard" property="executestandard" />
    <result column="executegrade" property="executegrade" />
    <result column="wrapherproperties" property="wrapherproperties" />
    <result column="testtypeother" property="testtypeother" />
    <result column="processother" property="processother" />
    <result column="storeother" property="storeother" />
    <result column="statusother" property="statusother" />
    <result column="domainid" property="domainid"/> 
    <result column="deleverdate" property="deleverdate"/>
	<result column="specialcondition" property="specialcondition" />
    <result column="standardfee" property="standardfee" />
    <result column="avilabletime" property="avilabletime" /> 	 
	<result column="leftsamplequality" property="leftsamplequality" />
	<result column="expireddate" property="expireddate" />
      <association    property="store" javaType="com.bjdfzh.userprivilage.entity.CommonType" >
      <id column="storeid" property="id"/>
      <result column="storename" property="label"/>
      <result column="storetempreture" property="code" /> 
     </association>
      <association    property="status" javaType="com.bjdfzh.userprivilage.entity.CommonType" >
      <id column="statusid" property="id"/>
      <result column="statustype" property="label"/> 
     </association> 
     <association    property="process" javaType="com.bjdfzh.userprivilage.entity.CommonType" >
      <id column="processid" property="id"/>
      <result column="processtype" property="label"/> 
     </association>
	 <association    property="testtype" javaType="com.bjdfzh.userprivilage.entity.CommonType" >
      <id column="testtypeid" property="id"/>
      <result column="testtype" property="label"/> 
     </association> 
    <collection  property="testprojects" ofType="com.bjdfzh.businessprocess.entity.ContactTestProject">  
	     <id column="tpid" property="id" />  
		 <result column="sampleid" property="sampleid"/>
		 <result column="qualificationid" property="qualificationid"  /> 
		 <result column="realprice" property="price"  />
		 <result column="testproject" property="testproject"  />
		 <result column="methodname" property="methodname"  />
		 <result column="standardname" property="standardname"/>
		 <result column="outsitecustomerid" property="outsitecustomerid"  />
		 <result column="remark" property="remark"  /> 
		 <result column="realprice" property="realprice" />
		 <result column="testcount" property="testcount"/>
		 <result column="limitmax" property="limitmax"/>
		 <result column="limitmin" property="limitmin"/>
		 <result column="roleid" property="roleid"/>
		 <result column="userid" property="userid"/>
		 <result column="testprojectid" property="testprojectid"/>
		 <result column="standardid" property="standardid"/>
    </collection>
</resultMap>

    <select id="getsamples" parameterType="string" resultMap="SampleMap">
       select
		ts.sampleid 
		,ts.projectid
		,ts.wrapherproperties
		,ts.standardfee
		,ts.deleverdate
		,ts.specialcondition
		,samplename
		,samplenumber 
		,samplequality
		,samplespec
		,samplevolume 
		,sampledate
		 
		,purty
		,brand
		 
		,manudate
		,manuno
	 ,avilabletime 
	 ,leftsamplequality 
	 ,expireddate 
		,ts.remark 
		,price
		,tm.testproject
		,tm.methodname
		,externprice
	  ,ts.testtypeid
	  ,t.testtype
	  ,ts.testtypeother
		,ts.storeid,tstore.storetempurature
		, tstore.storename,ts.storeother
		 ,ts.processid
		 ,  tprocess.sampleprocess   processtype
		 ,ts.processother
			,ts.statusid 
			, tsttus.statustype  statustype
			,ts.statusother
		  ,ts.executestandard
			,ts.executegrade
		 from t_sample ts
		 left join
		 (
		  select
			 t.sampleid,
			GROUP_CONCAT(tc.testproject) testproject,
			GROUP_CONCAT(tm.methodname) methodname
			from t_test_project t
			inner join t_qualification tq
			on tq.id=t.qualificationid
			inner join t_test_category tc
			on tc.id=tq.testprojectid
			left join t_test_method tm
			on tm.id=tq.methodid
			group by  t.sampleid
		 ) tm
		 on   tm.sampleid=ts.sampleid
		 left join t_test_type t
		 on t.id=ts.testtypeid
		 left join t_sapmple_store_type tstore
		 on tstore.id=ts.storeid
		 left join t_sample_process_type tprocess
		 on tstore.id=ts.processid
		 left join t_sapmle_status_type tsttus
		 on tsttus.id=ts.statusid
		  where ts.contactid=#{id}
    </select> 
    <select id="getsample" parameterType="string" resultMap="SampleMap">
       select
		ts.sampleid 
		,ts.projectid
		,ts.wrapherproperties
		,ts.standardfee
		,ts.deleverdate
		,ts.specialcondition
		,avilabletime 
	 ,leftsamplequality 
	 ,expireddate 
		,samplename
		,samplenumber 
		,samplequality
		,samplespec
		,samplevolume 
		,sampledate
		,manufactory
		,manufactoryaddress
		,purty
		,brand
		,manufactoryphone
		,manudate
		,manuno
		,ts.remark 
		,price
		,tm.testproject
		,tm.methodname
		,externprice
	  ,ts.testtypeid
	  ,t.testtype
	  ,ts.testtypeother
		,ts.storeid,tstore.storetempurature
		, tstore.storename,ts.storeother
		 ,ts.processid
		 ,  tprocess.sampleprocess   processtype
		 ,ts.processother
			,ts.statusid 
			, tsttus.statustype  statustype
			,ts.statusother
		  ,ts.executestandard
			,ts.executegrade
		 from t_sample ts
		 left join
		 (
		  select
			 t.sampleid,
			GROUP_CONCAT(tc.testproject) testproject,
			GROUP_CONCAT(tm.methodname) methodname
			from t_test_project t
			inner join t_qualification tq
			on tq.id=t.qualificationid
			inner join t_test_category tc
			on tc.id=tq.testprojectid
			left join t_test_method tm
			on tm.id=tq.methodid
			group by  t.sampleid
		 ) tm
		 on   tm.sampleid=ts.sampleid
		 left join t_test_type t
		 on t.id=ts.testtypeid
		 left join t_sapmple_store_type tstore
		 on tstore.id=ts.storeid
		 left join t_sample_process_type tprocess
		 on tstore.id=ts.processid
		 left join t_sapmle_status_type tsttus
		 on tsttus.id=ts.statusid
		  where ts.sampleid=#{id}
    </select> 
      <insert id="addsample" parameterType="com.bjdfzh.businessprocess.entity.Sample" >
     insert into t_sample(
        sampleid  
		,projectid
		,samplename
		,samplenumber 
		,samplequality
		,samplespec
		,samplevolume
		,storeid
		,storeother
		,statusid
		,statusother
		,processid
		,processother
		,sampleuserid
		,sampledate 
		,purty
		,brand 
		,manudate
		,manuno
		,remark 
		,price 
		,standardfee
		,deleverdate
		,specialcondition
		 )values(
		#{id}
		,#{projectid}
		,#{samplename}
		,#{samplenumber} 
		,#{samplequality}
		,#{samplespec}
		,#{samplevolume}
		,#{store.id}
		,#{storeother}
		,#{status.id}
		,#{statusother}
		,#{process.id}
		,#{processother}
		,#{sampleuserid}
		,#{sampledate} 
		,#{purty}
		,#{brand} 
		,#{manudate}
		,#{manuno}
		,#{remark}
		 
		,#{price}
		,#{standardfee}
		,#{deleverdate}
		,#{specialcondition}
		)
     </insert>
     <update id="updatesample" parameterType="com.bjdfzh.businessprocess.entity.Sample">
			  update t_sample set
			  projectid=#{contactid}
			,samplename=#{samplename}
			,samplenumber=#{samplenumber} 
			,samplequality=#{samplequality}
			,samplespec=#{samplespec}
			,samplevolume=#{samplevolume}
			,storeid=#{storeid}
			,storeother=#{storeother}
			,statusid=#{statusid}
			,statusother=#{statusother}
			,processid=#{processid}
			,processother=#{processother}
			,sampleuserid=#{sampleuserid}
			,sampledate=#{sampledate}
			
			,purty=#{purty}
			,brand=#{brand} 
			,manudate=#{manudate}
			,manuno=#{manuno}
			,remark=#{remark} 
			,price=#{price} 
			,standardfee=#{standardfee}
			,deleverdate=#{deleverdate}
			,specialcondition=#{specialcondition}
			where sampleid=#{id}
     </update>
      <insert id="addsamples" parameterType="java.util.ArrayList">
     insert t_sample(
         sampleid  
		,projectid
		,samplename
		,samplenumber 
		,samplequality
		,samplespec
		,samplevolume
		,storeid
		,storeother
		,statusid
		,statusother
		,processid
		,processother 
		,sampledate
		
		,purty
		,brand
		
		,manudate
		,manuno
		,remark 
		,price
		,standardfee
		,deleverdate
		,specialcondition
		 )values
     <foreach collection="list"   index="index" separator="," item="item">
        (
         #{item.id}  
		,#{item.projectid}
		,#{item.samplename}
		,#{item.samplenumber} 
		,#{item.samplequality}
		,#{item.samplespec}
		,#{item.samplevolume}
		,#{item.store.id}
		,#{item.storeother}
		,#{item.status.id}
		,#{item.statusother}
		,#{item.process.id}
		,#{item.processother} 
		,#{item.sampledate}
		
		,#{item.purty}
		,#{item.brand}
		
		,#{item.manudate}
		,#{item.manuno}
		,#{item.remark} 
		,#{item.price} 
		,#{item.standardfee}
		,#{item.deleverdate}
		,#{item.specialcondition}
        )  
     </foreach>
    </insert> 
      <delete id="deletesample"  parameterType="string">
       delete from t_sample where sampleid=#{id}
     </delete>
     <update id="supplimentupdatesamples" parameterType="list">
            update t_sample
            <trim prefix="set" suffixOverrides=",">
             <trim prefix="statusid =case" suffix="end,">
                 <foreach collection="list" item="i" index="index">
                         <if test="i.id!=null">
                          when sampleid=#{i.id} then #{i.status.id}
                         </if>
                         </foreach>
                         </trim>
                         <trim prefix="processid =case" suffix="end,">
                 <foreach collection="list" item="i" index="index">
                         <if test="i.id!=null">
                          when sampleid=#{i.id} then #{i.process.id}
                         </if>
                         </foreach>
                         </trim>  
               <trim prefix="statusother =case" suffix="end,">
                 <foreach collection="list" item="i" index="index">
                         <if test="i.id!=null">
                          when sampleid=#{i.id} then #{i.statusother}
                         </if>
                         </foreach>
                         </trim>
                         <trim prefix="processother =case" suffix="end,">
                 <foreach collection="list" item="i" index="index">
                         <if test="i.id!=null">
                          when sampleid=#{i.id} then #{i.processother}
                         </if>
                         </foreach>
                         </trim> 
                         <trim prefix="manudate =case" suffix="end,">
                 <foreach collection="list" item="i" index="index">
                         <if test="i.id!=null">
                          when sampleid=#{i.id} then #{i.manudate}
                         </if>
                         </foreach>
                         </trim>
                         <trim prefix="deleverdate =case" suffix="end,">
                 <foreach collection="list" item="i" index="index">
                         <if test="i.id!=null">
                          when sampleid=#{i.id} then #{i.deleverdate}
                         </if>
                         </foreach>
                         </trim>  
                          <trim prefix="specialcondition =case" suffix="end,">
                 <foreach collection="list" item="i" index="index">
                         <if test="i.id!=null">
                          when sampleid=#{i.id} then #{i.specialcondition}
                         </if>
                         </foreach>
                         </trim>  
                         <trim prefix="brand =case" suffix="end,">
                 <foreach collection="list" item="i" index="index">
                         <if test="i.id!=null">
                          when sampleid=#{i.id} then #{i.brand}
                         </if>
                         </foreach>
                         </trim>
                         <trim prefix="executestandard =case" suffix="end,">
                 <foreach collection="list" item="i" index="index">
                         <if test="i.id!=null">
                          when sampleid=#{i.id} then #{i.executestandard}
                         </if>
                         </foreach>
                         </trim>
                         <trim prefix="executegrade =case" suffix="end,">
                 <foreach collection="list" item="i" index="index">
                         <if test="i.id!=null">
                          when sampleid=#{i.id} then #{i.executegrade}
                         </if>
                         </foreach>
                         </trim>
                          <trim prefix="wrapherproperties =case" suffix="end,">
                         <foreach collection="list" item="i" index="index">
	                         <if test="i.id!=null">
	                          when sampleid=#{i.id} then #{i.wrapherproperties}
	                         </if>
                         </foreach>
                         </trim>
                         <trim prefix="samplespec =case" suffix="end,">
                 <foreach collection="list" item="i" index="index">
                         <if test="i.id!=null">
                          when sampleid=#{i.id} then #{i.samplespec}
                         </if>
                         </foreach>
                         </trim>
                          <trim prefix="samplequality =case" suffix="end,">
                         <foreach collection="list" item="i" index="index">
	                         <if test="i.id!=null">
	                          when sampleid=#{i.id} then #{i.samplequality}
	                         </if>
                         </foreach>
                         </trim>
                         <trim prefix="samplenumber =case" suffix="end,">
                         <foreach collection="list" item="i" index="index">
	                         <if test="i.id!=null">
	                          when sampleid=#{i.id} then #{i.samplenumber}
	                         </if>
                         </foreach>
                         </trim>
                         <trim prefix="sampledate =case" suffix="end,">
                         <foreach collection="list" item="i" index="index">
	                         <if test="i.id!=null">
	                          when sampleid=#{i.id} then #{i.sampledate}
	                         </if>
                         </foreach>
                         </trim>
                          <trim prefix="avilabletime =case" suffix="end,">
                         <foreach collection="list" item="i" index="index">
	                         <if test="i.id!=null">
	                          when sampleid=#{i.id} then #{i.avilabletime}
	                         </if>
                         </foreach>
                         </trim>
                          <trim prefix="leftsamplequality =case" suffix="end,">
                         <foreach collection="list" item="i" index="index">
	                         <if test="i.id!=null">
	                          when sampleid=#{i.id} then #{i.leftsamplequality}
	                         </if>
                         </foreach>
                         </trim>
                          <trim prefix="expireddate =case" suffix="end,">
                         <foreach collection="list" item="i" index="index">
	                         <if test="i.id!=null">
	                          when sampleid=#{i.id} then #{i.expireddate}
	                         </if>
                         </foreach>
                         </trim>
                         </trim>
                          where
			            <foreach collection="list" separator="or" item="i" index="index" >
			              sampleid=#{i.id}
			          </foreach> 
     </update>
     <select id="getsamplebydate" parameterType="string" resultMap="SampleMap">
     select
		ts.sampleid 
		,ts.projectid
		,ts.wrapherproperties
		,ts.standardfee
		,ts.deleverdate
		,ts.specialcondition
		,samplename
		,samplenumber 
		,samplequality
		,samplespec
		,samplevolume 
		,sampledate
		,tp.customername manufactory
		,tp.customeraddress manufactoryaddress
		,purty
		,brand
		,tp.phone manufactoryphone
		,manudate
		,manuno
		,ts.remark
		,avilabletime 
		 ,leftsamplequality 
		 ,expireddate 
		,price
		,tm.testproject
		,tm.methodname
		,externprice
	  ,ts.testtypeid
	  ,t.testtype
	  ,ts.testtypeother
		,ts.storeid,tstore.storetempurature
		, tstore.storename,ts.storeother
		 ,case when tp.processid=0 then 2 else tp.processid end processid
		 ,  tprocess.sampleprocess   processtype
		 ,ts.processother
			,ts.statusid 
			, tsttus.statustype  statustype
			,ts.statusother
		  ,ts.executestandard
			,ts.executegrade
		 from t_sample ts
		 inner join 
		 (
		    select tproject.projectid, tcu.customername,tcu.customeraddress,tcu.phone,tinfo.processid from t_contact_customer tc 
				 inner join t_customer tcu
				 on tcu.id=tc.customerid
				 inner join t_business_project tproject
				 on tproject.contactid=tc.contactid
				 inner join t_contact_info tinfo
				 on tinfo.contactid=tproject.contactid
				where customertype=3 
		 ) tp
		 on tp.projectid=ts.projectid
		 left join
		 (
		  select
			 t.sampleid,
			GROUP_CONCAT(tc.testproject) testproject,
			GROUP_CONCAT(tstand.standardname) methodname
			from t_test_project t
			inner join t_qualification tq
			on tq.id=t.qualificationid
			inner join t_test_category tc
			on tc.id=tq.testprojectid
			left join t_test_standard tstand
	         on tstand.id=tq.standardid
			group by  t.sampleid
		 ) tm
		 on   tm.sampleid=ts.sampleid
		 left join t_test_type t
		 on t.id=ts.testtypeid
		 left join t_sapmple_store_type tstore
		 on tstore.id=ts.storeid
		 left join t_sample_process_type tprocess
		 on tprocess.id=tp.processid
		 left join t_sapmle_status_type tsttus
		 on tsttus.id=ts.statusid
		 where ts.sampledate is not null and ts.sampledate between #{begin} and #{end}
		 order by ts.samplenumber
     </select>
</mapper>